<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Showcase Template</title><link>https://andryut.github.io/showcase/docs/exercises/</link><description>Recent content on Showcase Template</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://andryut.github.io/showcase/docs/exercises/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://andryut.github.io/showcase/docs/exercises/Coloring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andryut.github.io/showcase/docs/exercises/Coloring/</guid><description>Coloring for colorblindness # Prompt: Implement a color mapping application that helps people who are color blind see the colors around them.
In order to assess this problem, first we need to understand colorblindness and later, pick one of the many forms this may manifest.
What is colorblindness? # Color blindness is classified according to the number of color channels that are available to a person to conveying color information into: monochromacy, dichromacy and anomalous trichromacy.</description></item><item><title/><link>https://andryut.github.io/showcase/docs/exercises/Depth-Perception/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andryut.github.io/showcase/docs/exercises/Depth-Perception/</guid><description>Parallax effect # Prompt: Take advantage of monocular cues to implement a 2D sketch to trick the eye into perceiving a 3D scene.
Here we have the parallax effect, tricking our eye into perceiving depth between objects in a 2-D plane.
Moon is following you at a slow speed and when the ball moves, the perspective of the buildings change.
On this sketch you can change the speed of the movement using left and right arrow keys.</description></item><item><title/><link>https://andryut.github.io/showcase/docs/exercises/Image-Processing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andryut.github.io/showcase/docs/exercises/Image-Processing/</guid><description>Image processing # image_processing.js let img; let isGrayscale = false; function preload() { img = loadImage(&amp;#39;car.jpg&amp;#39;); } function setup() { createCanvas(img.width, img.height); img.resize(width, height); sliderRad = createSlider(10, 100, 50, 5); sliderRad.position(40, 20); sliderRad.style(&amp;#39;width&amp;#39;, &amp;#39;80px&amp;#39;); sliderZoom = createSlider(1, 4, 2, 0.1); sliderZoom.position(40, 50); sliderZoom.style(&amp;#39;width&amp;#39;, &amp;#39;80px&amp;#39;); grayscaleButton = createButton(&amp;#39;Luma&amp;#39;); grayscaleButton.position(40, 80); grayscaleButton.mouseClicked(toggleGrayscale); } function draw() { background(0); image(img, 0, 0); // Apply the zoom effect within the circular area loadPixels(); let lensRadius = sliderRad.</description></item><item><title/><link>https://andryut.github.io/showcase/docs/exercises/Mach-Bands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andryut.github.io/showcase/docs/exercises/Mach-Bands/</guid><description>Mach Bands # Prompt: Develop a terrain visualization application. Check out the 3D terrain generation with Perlin noise coding train tutorial.
Voronoi diagram.) # In mathematics, a Voronoi diagram is a partition of a plane into regions close to each of a given set of objects.
Implementation # In the following p5 sketch we mixed Perlin terrain generation, mach bands and voronoi diagrams.
First we create a set of random points in a plane, then we compute the voronoi diagram for this set of points using the gorhill javascript library.</description></item><item><title/><link>https://andryut.github.io/showcase/docs/exercises/Masking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andryut.github.io/showcase/docs/exercises/Masking/</guid><description>Masking # Prompt: Implement a kinegram and some moiré patterns which are close related visual phenomena to masking.
Visual masking is the reduction or elimination of the visibility of one brief (≤ 50 ms) stimulus, called the “target”, by the presentation of a second brief stimulus, called the “mask”. Introduced near the end of the 19th and beginning of the 20th century (Exner, 1868; McDougal, 1904; Sherrington, 1897; Stigler, 1911) and extensively studied since then, masking, an interesting phenomenon in its own right, is a useful tool for exploring the dynamics of visual information processing (Breitmeyer &amp;amp; Öğmen, 2006).</description></item><item><title/><link>https://andryut.github.io/showcase/docs/exercises/Photomosaic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andryut.github.io/showcase/docs/exercises/Photomosaic/</guid><description>Photomosaic # The photomosaic is an image, portrait or photograph that is divided by geometric figures, generally by squares or rectangles of the same size, this in order to replace them with other portraits, photographs or images that match the average colors that the figures contain. geometric shapes of the original image, achieving that when viewing the image from a distant point it is possible to see it as the original, but when viewing from a nearby point or when zooming in it can be perceived that they are made up of other images.</description></item><item><title/><link>https://andryut.github.io/showcase/docs/exercises/Post-Effect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andryut.github.io/showcase/docs/exercises/Post-Effect/</guid><description>Posteffects # Prompt: Implement some posteffects you find interesting.
Posteffects are, in the simplest way, effects thhat are applied to an image after it has been rendered. This effects can range from simple xoom lenses to kaleidoscopes or fish eye lenses like the one I implemented for this excercise.
Fish Eye Lens effect # The fish eye lens effect refers to a distinctive visual distortion created by a special type of camera lens known as a fish eye lens.</description></item><item><title/><link>https://andryut.github.io/showcase/docs/exercises/Spatial-Coherence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andryut.github.io/showcase/docs/exercises/Spatial-Coherence/</guid><description>Spatial Coherence # Prompt: Implement a pixelator video application and perform a benchmark of the results (color avg vs spatial coherence). How would you assess the visual quality of the results?
The color averaging filter works smoothing the image loosing the pictures details, otherwise, the spacial coherence technique achieves to keep details and shapes edges, this cant be done by color averaging smooth effect. Code implementation let img; let ratioInput; let ratioValue; let newImg, newImg2; let updateBtn; function preload() { img = loadImage(&amp;#34;https://picsum.</description></item><item><title/><link>https://andryut.github.io/showcase/docs/exercises/Temporal-Coherence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andryut.github.io/showcase/docs/exercises/Temporal-Coherence/</guid><description>Temporal Coherence # Prompt: Implement an animation with keyframes using the nub library for Processing (Java).
Even though temporal coherence is a physics term refering to the similarity of waves through time, it can be used as a analogy of animation and it´s coherent flow in the visual computing world.
Now, to really drive this point home it´s necessary to talk about a very important thing regarding animation and it´s implementation in visual computing: we´re talking about keyframes.</description></item><item><title/><link>https://andryut.github.io/showcase/docs/exercises/Visual-Illusions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andryut.github.io/showcase/docs/exercises/Visual-Illusions/</guid><description>Visual illusions # Prompt: Study, implement and discuss possible applications of some known visual phenomena and optical illusions.
The Hermann grid is used to create the optical illusion of perceiving a ghost between the grid cells, it&amp;rsquo;s produced a neural process called &amp;ldquo;Lateral inhibition&amp;rdquo;. In the image there are only white spaces and black blocks but the eyes perceive some kind of contrasts creating &amp;ldquo;gosthlike&amp;rdquo; shapes.
Herman Grid function setup() { createCanvas(750, 750); } function draw() { background(0); stroke(&amp;#39;white&amp;#39;); strokeWeight(7); for (var i = 0; i &amp;lt; 25; i++){ line(width/25*i, 0, width/25*i, height) } for (var i = 0; i &amp;lt; 25; i++){ line(0, height/25*i, width, height/25*i) } } In the following image there are parallel lines in each row, but exists an illusion of a vertically displacement created by the irregular columns sort.</description></item></channel></rss>